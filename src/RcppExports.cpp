// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gibbs_sample_mixing_matrix
Eigen::MatrixXd gibbs_sample_mixing_matrix(Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::MatrixXd>& H, const Eigen::Map<Eigen::MatrixXd>& B, const Eigen::Map<Eigen::MatrixXd>& YYt, const Eigen::Map<Eigen::VectorXd>& angle_range, const Eigen::Map<Eigen::VectorXd>& sin_theta, const Eigen::Map<Eigen::VectorXd>& cos_theta, Eigen::Map<Eigen::MatrixXd>& column_reduced_mixing_matrix, Eigen::Map<Eigen::MatrixXd>& null_space);
RcppExport SEXP _SparseBayesICA_gibbs_sample_mixing_matrix(SEXP ASEXP, SEXP HSEXP, SEXP BSEXP, SEXP YYtSEXP, SEXP angle_rangeSEXP, SEXP sin_thetaSEXP, SEXP cos_thetaSEXP, SEXP column_reduced_mixing_matrixSEXP, SEXP null_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type H(HSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type YYt(YYtSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type angle_range(angle_rangeSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type sin_theta(sin_thetaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type cos_theta(cos_thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type column_reduced_mixing_matrix(column_reduced_mixing_matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type null_space(null_spaceSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_sample_mixing_matrix(A, H, B, YYt, angle_range, sin_theta, cos_theta, column_reduced_mixing_matrix, null_space));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_sample_mixing_matrix_inplace
void gibbs_sample_mixing_matrix_inplace(Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::MatrixXd>& H, const Eigen::MatrixXd& B, const Eigen::Map<Eigen::MatrixXd>& YYt, const Eigen::Map<Eigen::VectorXd>& angle_range, const Eigen::Map<Eigen::VectorXd>& sin_theta, const Eigen::Map<Eigen::VectorXd>& cos_theta, Eigen::Map<Eigen::MatrixXd>& column_reduced_mixing_matrix, Eigen::Map<Eigen::MatrixXd>& null_space);
RcppExport SEXP _SparseBayesICA_gibbs_sample_mixing_matrix_inplace(SEXP ASEXP, SEXP HSEXP, SEXP BSEXP, SEXP YYtSEXP, SEXP angle_rangeSEXP, SEXP sin_thetaSEXP, SEXP cos_thetaSEXP, SEXP column_reduced_mixing_matrixSEXP, SEXP null_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type H(HSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type YYt(YYtSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type angle_range(angle_rangeSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type sin_theta(sin_thetaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type cos_theta(cos_thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type column_reduced_mixing_matrix(column_reduced_mixing_matrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type null_space(null_spaceSEXP);
    gibbs_sample_mixing_matrix_inplace(A, H, B, YYt, angle_range, sin_theta, cos_theta, column_reduced_mixing_matrix, null_space);
    return R_NilValue;
END_RCPP
}
// eigen_matrix_prod_XYt
Eigen::MatrixXd eigen_matrix_prod_XYt(const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::MatrixXd>& Y);
RcppExport SEXP _SparseBayesICA_eigen_matrix_prod_XYt(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_matrix_prod_XYt(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// utility_update_matrix_across_nodes_inplace
void utility_update_matrix_across_nodes_inplace(Eigen::Map<Eigen::MatrixXd>& X, const Rcpp::List& Xadd);
RcppExport SEXP _SparseBayesICA_utility_update_matrix_across_nodes_inplace(SEXP XSEXP, SEXP XaddSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xadd(XaddSEXP);
    utility_update_matrix_across_nodes_inplace(X, Xadd);
    return R_NilValue;
END_RCPP
}
// matmul_inplace
void matmul_inplace(Eigen::Map<Eigen::MatrixXd>& mat_to_update, const Eigen::Map<Eigen::MatrixXd>& left_side, const Eigen::Map<Eigen::MatrixXd>& right_side);
RcppExport SEXP _SparseBayesICA_matmul_inplace(SEXP mat_to_updateSEXP, SEXP left_sideSEXP, SEXP right_sideSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type mat_to_update(mat_to_updateSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type left_side(left_sideSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type right_side(right_sideSEXP);
    matmul_inplace(mat_to_update, left_side, right_side);
    return R_NilValue;
END_RCPP
}
// calculate_YiSit
Eigen::MatrixXd calculate_YiSit(const Eigen::Map<Eigen::MatrixXd>& Y, const Eigen::Map<Eigen::MatrixXd>& Si, int Q);
RcppExport SEXP _SparseBayesICA_calculate_YiSit(SEXP YSEXP, SEXP SiSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Si(SiSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_YiSit(Y, Si, Q));
    return rcpp_result_gen;
END_RCPP
}
// calculate_YiSit_inplace
void calculate_YiSit_inplace(Eigen::Map<Eigen::MatrixXd>& YSi, Eigen::Map<Eigen::MatrixXd>& QxQStore, const Eigen::Map<Eigen::MatrixXd>& Y, const Eigen::Map<Eigen::MatrixXd>& Si, int Q);
RcppExport SEXP _SparseBayesICA_calculate_YiSit_inplace(SEXP YSiSEXP, SEXP QxQStoreSEXP, SEXP YSEXP, SEXP SiSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type YSi(YSiSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type QxQStore(QxQStoreSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Si(SiSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    calculate_YiSit_inplace(YSi, QxQStore, Y, Si, Q);
    return R_NilValue;
END_RCPP
}
// calculate_AitYi_inplace
void calculate_AitYi_inplace(Eigen::Map<Eigen::MatrixXd>& Si, Eigen::Map<Eigen::MatrixXd>& VxQStore, const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::MatrixXd>& Y, int Q);
RcppExport SEXP _SparseBayesICA_calculate_AitYi_inplace(SEXP SiSEXP, SEXP VxQStoreSEXP, SEXP ASEXP, SEXP YSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type Si(SiSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type VxQStore(VxQStoreSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    calculate_AitYi_inplace(Si, VxQStore, A, Y, Q);
    return R_NilValue;
END_RCPP
}
// calculate_AitYi
void calculate_AitYi(Eigen::Map<Eigen::MatrixXd>& Si, const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::MatrixXd>& Y, int Q);
RcppExport SEXP _SparseBayesICA_calculate_AitYi(SEXP SiSEXP, SEXP ASEXP, SEXP YSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type Si(SiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    calculate_AitYi(Si, A, Y, Q);
    return R_NilValue;
END_RCPP
}
// sample_u
void sample_u(Eigen::Map<Eigen::MatrixXd>& u, const Eigen::Map<Eigen::VectorXd>& stick_breaking_weights, const Eigen::Map<Eigen::MatrixXi>& cluster_membership);
RcppExport SEXP _SparseBayesICA_sample_u(SEXP uSEXP, SEXP stick_breaking_weightsSEXP, SEXP cluster_membershipSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type stick_breaking_weights(stick_breaking_weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi>& >::type cluster_membership(cluster_membershipSEXP);
    sample_u(u, stick_breaking_weights, cluster_membership);
    return R_NilValue;
END_RCPP
}
// likelihood_log_sum_exp1
void likelihood_log_sum_exp1(Eigen::Map<Eigen::VectorXd>& probs, Eigen::Map<Eigen::VectorXd>& log_probs);
RcppExport SEXP _SparseBayesICA_likelihood_log_sum_exp1(SEXP probsSEXP, SEXP log_probsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type log_probs(log_probsSEXP);
    likelihood_log_sum_exp1(probs, log_probs);
    return R_NilValue;
END_RCPP
}
// likelihood_log_sum_exp2
void likelihood_log_sum_exp2(Eigen::Map<Eigen::VectorXd>& probs, Eigen::Map<Eigen::VectorXd>& log_probs);
RcppExport SEXP _SparseBayesICA_likelihood_log_sum_exp2(SEXP probsSEXP, SEXP log_probsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type log_probs(log_probsSEXP);
    likelihood_log_sum_exp2(probs, log_probs);
    return R_NilValue;
END_RCPP
}
// sample_cluster_membership_indicators
void sample_cluster_membership_indicators(Eigen::Map<Eigen::MatrixXi>& cluster_memberships, Eigen::Map<Eigen::VectorXd>& n_in_cluster, const Eigen::Map<Eigen::MatrixXd>& S0, const Eigen::Map<Eigen::MatrixXd>& u, const Eigen::Map<Eigen::VectorXd>& stick_breaking_weights, const Eigen::Map<Eigen::VectorXd>& mu_h, const Eigen::Map<Eigen::VectorXd>& sigma_sq_h, const Eigen::Map<Eigen::VectorXd>& sigma_sq_q, int H);
RcppExport SEXP _SparseBayesICA_sample_cluster_membership_indicators(SEXP cluster_membershipsSEXP, SEXP n_in_clusterSEXP, SEXP S0SEXP, SEXP uSEXP, SEXP stick_breaking_weightsSEXP, SEXP mu_hSEXP, SEXP sigma_sq_hSEXP, SEXP sigma_sq_qSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi>& >::type cluster_memberships(cluster_membershipsSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type n_in_cluster(n_in_clusterSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type stick_breaking_weights(stick_breaking_weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu_h(mu_hSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type sigma_sq_h(sigma_sq_hSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type sigma_sq_q(sigma_sq_qSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    sample_cluster_membership_indicators(cluster_memberships, n_in_cluster, S0, u, stick_breaking_weights, mu_h, sigma_sq_h, sigma_sq_q, H);
    return R_NilValue;
END_RCPP
}
// generate_cluster_mapping_vector_inplace
void generate_cluster_mapping_vector_inplace(Eigen::Map<Eigen::VectorXd>& mapping, const Eigen::Map<Eigen::VectorXd>& n_in_cluster);
RcppExport SEXP _SparseBayesICA_generate_cluster_mapping_vector_inplace(SEXP mappingSEXP, SEXP n_in_clusterSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type mapping(mappingSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type n_in_cluster(n_in_clusterSEXP);
    generate_cluster_mapping_vector_inplace(mapping, n_in_cluster);
    return R_NilValue;
END_RCPP
}
// cleanup_cluster_ordering_inplace
void cleanup_cluster_ordering_inplace(Eigen::Map<Eigen::MatrixXi>& cluster_membership, Eigen::Map<Eigen::VectorXd>& mu_h, Eigen::Map<Eigen::VectorXd>& sigma_sq_h, Eigen::Map<Eigen::VectorXd>& n_in_cluster, Eigen::Map<Eigen::VectorXd>& mapping, int actual_cluster_count);
RcppExport SEXP _SparseBayesICA_cleanup_cluster_ordering_inplace(SEXP cluster_membershipSEXP, SEXP mu_hSEXP, SEXP sigma_sq_hSEXP, SEXP n_in_clusterSEXP, SEXP mappingSEXP, SEXP actual_cluster_countSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi>& >::type cluster_membership(cluster_membershipSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type mu_h(mu_hSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type sigma_sq_h(sigma_sq_hSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type n_in_cluster(n_in_clusterSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type mapping(mappingSEXP);
    Rcpp::traits::input_parameter< int >::type actual_cluster_count(actual_cluster_countSEXP);
    cleanup_cluster_ordering_inplace(cluster_membership, mu_h, sigma_sq_h, n_in_cluster, mapping, actual_cluster_count);
    return R_NilValue;
END_RCPP
}
// sample_spatial_maps_inplace
void sample_spatial_maps_inplace(Eigen::Map<Eigen::MatrixXd>& S0, Eigen::Map<Eigen::MatrixXd>& beta, Eigen::Map<Eigen::VectorXd>& posterior_mean, Eigen::Map<Eigen::MatrixXd>& posterior_variance, Eigen::Map<Eigen::MatrixXd>& prior_precision, Eigen::Map<Eigen::VectorXd>& draw, const Eigen::Map<Eigen::MatrixXd>& AtY, const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::MatrixXd>& XtX, const Eigen::Map<Eigen::VectorXd>& sigma_sq_q, const Eigen::Map<Eigen::MatrixXd>& tau_sq, const Eigen::Map<Eigen::MatrixXd>& lambda_sq, const Eigen::Map<Eigen::VectorXd>& mu_h_div_sigma_sq_h, const Eigen::Map<Eigen::VectorXd>& sigma_sq_h, const Eigen::Map<Eigen::MatrixXi>& cluster_membership, const Eigen::Map<Eigen::MatrixXd>& I);
RcppExport SEXP _SparseBayesICA_sample_spatial_maps_inplace(SEXP S0SEXP, SEXP betaSEXP, SEXP posterior_meanSEXP, SEXP posterior_varianceSEXP, SEXP prior_precisionSEXP, SEXP drawSEXP, SEXP AtYSEXP, SEXP XSEXP, SEXP XtXSEXP, SEXP sigma_sq_qSEXP, SEXP tau_sqSEXP, SEXP lambda_sqSEXP, SEXP mu_h_div_sigma_sq_hSEXP, SEXP sigma_sq_hSEXP, SEXP cluster_membershipSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type posterior_mean(posterior_meanSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type posterior_variance(posterior_varianceSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type prior_precision(prior_precisionSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type draw(drawSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type AtY(AtYSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type sigma_sq_q(sigma_sq_qSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type tau_sq(tau_sqSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type lambda_sq(lambda_sqSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu_h_div_sigma_sq_h(mu_h_div_sigma_sq_hSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type sigma_sq_h(sigma_sq_hSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi>& >::type cluster_membership(cluster_membershipSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type I(ISEXP);
    sample_spatial_maps_inplace(S0, beta, posterior_mean, posterior_variance, prior_precision, draw, AtY, X, XtX, sigma_sq_q, tau_sq, lambda_sq, mu_h_div_sigma_sq_h, sigma_sq_h, cluster_membership, I);
    return R_NilValue;
END_RCPP
}
// update_spatial_map_posterior_tracking_inplace
void update_spatial_map_posterior_tracking_inplace(Eigen::Map<Eigen::MatrixXd>& S0_pm, Eigen::Map<Eigen::MatrixXd>& beta_pm, Eigen::Map<Eigen::MatrixXd>& Beta_ngt0, Eigen::Map<Eigen::MatrixXd>& lambda_sq_posterior_mean, const Eigen::Map<Eigen::MatrixXd>& S0, const Eigen::Map<Eigen::MatrixXd>& beta, const Eigen::Map<Eigen::MatrixXd>& lambda_sq, double n_mcmc);
RcppExport SEXP _SparseBayesICA_update_spatial_map_posterior_tracking_inplace(SEXP S0_pmSEXP, SEXP beta_pmSEXP, SEXP Beta_ngt0SEXP, SEXP lambda_sq_posterior_meanSEXP, SEXP S0SEXP, SEXP betaSEXP, SEXP lambda_sqSEXP, SEXP n_mcmcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type S0_pm(S0_pmSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type beta_pm(beta_pmSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type Beta_ngt0(Beta_ngt0SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type lambda_sq_posterior_mean(lambda_sq_posterior_meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type lambda_sq(lambda_sqSEXP);
    Rcpp::traits::input_parameter< double >::type n_mcmc(n_mcmcSEXP);
    update_spatial_map_posterior_tracking_inplace(S0_pm, beta_pm, Beta_ngt0, lambda_sq_posterior_mean, S0, beta, lambda_sq, n_mcmc);
    return R_NilValue;
END_RCPP
}
// calculate_DPM_hyperparameter_suffstats_inplace
void calculate_DPM_hyperparameter_suffstats_inplace(Eigen::Map<Eigen::MatrixXd>& sum_Ssq_qh, Eigen::Map<Eigen::MatrixXd>& Sbar_qh, Eigen::Map<Eigen::MatrixXd>& n_in_clust_qh, const Eigen::Map<Eigen::MatrixXd>& S0, const Eigen::Map<Eigen::MatrixXi>& cluster_membership);
RcppExport SEXP _SparseBayesICA_calculate_DPM_hyperparameter_suffstats_inplace(SEXP sum_Ssq_qhSEXP, SEXP Sbar_qhSEXP, SEXP n_in_clust_qhSEXP, SEXP S0SEXP, SEXP cluster_membershipSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type sum_Ssq_qh(sum_Ssq_qhSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type Sbar_qh(Sbar_qhSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type n_in_clust_qh(n_in_clust_qhSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi>& >::type cluster_membership(cluster_membershipSEXP);
    calculate_DPM_hyperparameter_suffstats_inplace(sum_Ssq_qh, Sbar_qh, n_in_clust_qh, S0, cluster_membership);
    return R_NilValue;
END_RCPP
}
// sample_DPM_hyperparameters_inplace
void sample_DPM_hyperparameters_inplace(Eigen::Map<Eigen::VectorXd>& mu_h, Eigen::Map<Eigen::VectorXd>& sigma_sq_h, const Eigen::Map<Eigen::MatrixXd>& sum_Ssq_qh, const Eigen::Map<Eigen::MatrixXd>& Sbar_qh, const Eigen::Map<Eigen::MatrixXd>& DPM_hyper_sse_unscaled, const Eigen::Map<Eigen::MatrixXd>& n_in_cluster_qh, const Eigen::Map<Eigen::VectorXd>& n_in_cluster, const Eigen::Map<Eigen::VectorXd>& sigma_sq_q, double prior_shape, double prior_scale, int maxH);
RcppExport SEXP _SparseBayesICA_sample_DPM_hyperparameters_inplace(SEXP mu_hSEXP, SEXP sigma_sq_hSEXP, SEXP sum_Ssq_qhSEXP, SEXP Sbar_qhSEXP, SEXP DPM_hyper_sse_unscaledSEXP, SEXP n_in_cluster_qhSEXP, SEXP n_in_clusterSEXP, SEXP sigma_sq_qSEXP, SEXP prior_shapeSEXP, SEXP prior_scaleSEXP, SEXP maxHSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type mu_h(mu_hSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type sigma_sq_h(sigma_sq_hSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type sum_Ssq_qh(sum_Ssq_qhSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Sbar_qh(Sbar_qhSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type DPM_hyper_sse_unscaled(DPM_hyper_sse_unscaledSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type n_in_cluster_qh(n_in_cluster_qhSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type n_in_cluster(n_in_clusterSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type sigma_sq_q(sigma_sq_qSEXP);
    Rcpp::traits::input_parameter< double >::type prior_shape(prior_shapeSEXP);
    Rcpp::traits::input_parameter< double >::type prior_scale(prior_scaleSEXP);
    Rcpp::traits::input_parameter< int >::type maxH(maxHSEXP);
    sample_DPM_hyperparameters_inplace(mu_h, sigma_sq_h, sum_Ssq_qh, Sbar_qh, DPM_hyper_sse_unscaled, n_in_cluster_qh, n_in_cluster, sigma_sq_q, prior_shape, prior_scale, maxH);
    return R_NilValue;
END_RCPP
}
// evaluate_error_inplace
void evaluate_error_inplace(Eigen::Map<Eigen::MatrixXd>& Ei, Eigen::Map<Eigen::MatrixXd>& Si, const Eigen::Map<Eigen::MatrixXd>& AtY, const Eigen::Map<Eigen::MatrixXd>& S0, const Eigen::Map<Eigen::MatrixXd>& beta, const Eigen::Map<Eigen::MatrixXd>& X);
RcppExport SEXP _SparseBayesICA_evaluate_error_inplace(SEXP EiSEXP, SEXP SiSEXP, SEXP AtYSEXP, SEXP S0SEXP, SEXP betaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type Ei(EiSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type Si(SiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type AtY(AtYSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    evaluate_error_inplace(Ei, Si, AtY, S0, beta, X);
    return R_NilValue;
END_RCPP
}
// evaluate_sse_inplace
void evaluate_sse_inplace(Eigen::Map<Eigen::VectorXd>& sse, const Eigen::Map<Eigen::MatrixXd>& Ei);
RcppExport SEXP _SparseBayesICA_evaluate_sse_inplace(SEXP sseSEXP, SEXP EiSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type sse(sseSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Ei(EiSEXP);
    evaluate_sse_inplace(sse, Ei);
    return R_NilValue;
END_RCPP
}
// evaluate_ssY_inplace
void evaluate_ssY_inplace(Eigen::Map<Eigen::VectorXd>& sse, const Eigen::Map<Eigen::MatrixXd>& AtY);
RcppExport SEXP _SparseBayesICA_evaluate_ssY_inplace(SEXP sseSEXP, SEXP AtYSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type sse(sseSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type AtY(AtYSEXP);
    evaluate_ssY_inplace(sse, AtY);
    return R_NilValue;
END_RCPP
}
// evaluate_reg_scale_inplace
void evaluate_reg_scale_inplace(Eigen::Map<Eigen::VectorXd>& reg_scale, const Eigen::Map<Eigen::MatrixXd>& S0, const Eigen::Map<Eigen::MatrixXd>& beta, const Eigen::Map<Eigen::VectorXd>& mu_h, const Eigen::Map<Eigen::VectorXd>& sigma_sq_h, const Eigen::Map<Eigen::MatrixXd>& tau_sq, const Eigen::Map<Eigen::MatrixXi>& cluster_membership, const Eigen::Map<Eigen::MatrixXd>& lambda_sq);
RcppExport SEXP _SparseBayesICA_evaluate_reg_scale_inplace(SEXP reg_scaleSEXP, SEXP S0SEXP, SEXP betaSEXP, SEXP mu_hSEXP, SEXP sigma_sq_hSEXP, SEXP tau_sqSEXP, SEXP cluster_membershipSEXP, SEXP lambda_sqSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type reg_scale(reg_scaleSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu_h(mu_hSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type sigma_sq_h(sigma_sq_hSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type tau_sq(tau_sqSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi>& >::type cluster_membership(cluster_membershipSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type lambda_sq(lambda_sqSEXP);
    evaluate_reg_scale_inplace(reg_scale, S0, beta, mu_h, sigma_sq_h, tau_sq, cluster_membership, lambda_sq);
    return R_NilValue;
END_RCPP
}
// sample_local_shrinkage_parameters_inplace
void sample_local_shrinkage_parameters_inplace(Eigen::Map<Eigen::MatrixXd>& lambda_sq, Eigen::Map<Eigen::MatrixXd>& nu, Eigen::Map<Eigen::MatrixXd>& cauchy_mixing, Eigen::Map<Eigen::MatrixXd>& cauchy_mixing_prior, const Eigen::Map<Eigen::MatrixXd>& beta, const Eigen::Map<Eigen::MatrixXd>& tau_sq, const Eigen::Map<Eigen::VectorXd>& sigma_sq_q);
RcppExport SEXP _SparseBayesICA_sample_local_shrinkage_parameters_inplace(SEXP lambda_sqSEXP, SEXP nuSEXP, SEXP cauchy_mixingSEXP, SEXP cauchy_mixing_priorSEXP, SEXP betaSEXP, SEXP tau_sqSEXP, SEXP sigma_sq_qSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type lambda_sq(lambda_sqSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type cauchy_mixing(cauchy_mixingSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type cauchy_mixing_prior(cauchy_mixing_priorSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type tau_sq(tau_sqSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type sigma_sq_q(sigma_sq_qSEXP);
    sample_local_shrinkage_parameters_inplace(lambda_sq, nu, cauchy_mixing, cauchy_mixing_prior, beta, tau_sq, sigma_sq_q);
    return R_NilValue;
END_RCPP
}
// calculate_tausum_inplace
void calculate_tausum_inplace(Eigen::Map<Eigen::MatrixXd>& tau_sum, const Eigen::Map<Eigen::MatrixXd>& beta, const Eigen::Map<Eigen::MatrixXd>& lambda_sq, const Eigen::Map<Eigen::VectorXd>& sigma_sq_q);
RcppExport SEXP _SparseBayesICA_calculate_tausum_inplace(SEXP tau_sumSEXP, SEXP betaSEXP, SEXP lambda_sqSEXP, SEXP sigma_sq_qSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type tau_sum(tau_sumSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type lambda_sq(lambda_sqSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type sigma_sq_q(sigma_sq_qSEXP);
    calculate_tausum_inplace(tau_sum, beta, lambda_sq, sigma_sq_q);
    return R_NilValue;
END_RCPP
}
// update_vector_in_place
void update_vector_in_place(Eigen::Map<Eigen::VectorXd>& variable, const Eigen::Map<Eigen::VectorXd>& new_level);
RcppExport SEXP _SparseBayesICA_update_vector_in_place(SEXP variableSEXP, SEXP new_levelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd>& >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type new_level(new_levelSEXP);
    update_vector_in_place(variable, new_level);
    return R_NilValue;
END_RCPP
}
// update_matrix_in_place
void update_matrix_in_place(Eigen::Map<Eigen::MatrixXd>& variable, const Eigen::Map<Eigen::MatrixXd>& new_level);
RcppExport SEXP _SparseBayesICA_update_matrix_in_place(SEXP variableSEXP, SEXP new_levelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type new_level(new_levelSEXP);
    update_matrix_in_place(variable, new_level);
    return R_NilValue;
END_RCPP
}
// update_matrix_in_place_rowspec
void update_matrix_in_place_rowspec(Eigen::Map<Eigen::MatrixXd>& variable, const Eigen::Map<Eigen::MatrixXd>& new_level, const Eigen::Map<Eigen::VectorXi>& indices);
RcppExport SEXP _SparseBayesICA_update_matrix_in_place_rowspec(SEXP variableSEXP, SEXP new_levelSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type new_level(new_levelSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type indices(indicesSEXP);
    update_matrix_in_place_rowspec(variable, new_level, indices);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SparseBayesICA_gibbs_sample_mixing_matrix", (DL_FUNC) &_SparseBayesICA_gibbs_sample_mixing_matrix, 9},
    {"_SparseBayesICA_gibbs_sample_mixing_matrix_inplace", (DL_FUNC) &_SparseBayesICA_gibbs_sample_mixing_matrix_inplace, 9},
    {"_SparseBayesICA_eigen_matrix_prod_XYt", (DL_FUNC) &_SparseBayesICA_eigen_matrix_prod_XYt, 2},
    {"_SparseBayesICA_utility_update_matrix_across_nodes_inplace", (DL_FUNC) &_SparseBayesICA_utility_update_matrix_across_nodes_inplace, 2},
    {"_SparseBayesICA_matmul_inplace", (DL_FUNC) &_SparseBayesICA_matmul_inplace, 3},
    {"_SparseBayesICA_calculate_YiSit", (DL_FUNC) &_SparseBayesICA_calculate_YiSit, 3},
    {"_SparseBayesICA_calculate_YiSit_inplace", (DL_FUNC) &_SparseBayesICA_calculate_YiSit_inplace, 5},
    {"_SparseBayesICA_calculate_AitYi_inplace", (DL_FUNC) &_SparseBayesICA_calculate_AitYi_inplace, 5},
    {"_SparseBayesICA_calculate_AitYi", (DL_FUNC) &_SparseBayesICA_calculate_AitYi, 4},
    {"_SparseBayesICA_sample_u", (DL_FUNC) &_SparseBayesICA_sample_u, 3},
    {"_SparseBayesICA_likelihood_log_sum_exp1", (DL_FUNC) &_SparseBayesICA_likelihood_log_sum_exp1, 2},
    {"_SparseBayesICA_likelihood_log_sum_exp2", (DL_FUNC) &_SparseBayesICA_likelihood_log_sum_exp2, 2},
    {"_SparseBayesICA_sample_cluster_membership_indicators", (DL_FUNC) &_SparseBayesICA_sample_cluster_membership_indicators, 9},
    {"_SparseBayesICA_generate_cluster_mapping_vector_inplace", (DL_FUNC) &_SparseBayesICA_generate_cluster_mapping_vector_inplace, 2},
    {"_SparseBayesICA_cleanup_cluster_ordering_inplace", (DL_FUNC) &_SparseBayesICA_cleanup_cluster_ordering_inplace, 6},
    {"_SparseBayesICA_sample_spatial_maps_inplace", (DL_FUNC) &_SparseBayesICA_sample_spatial_maps_inplace, 16},
    {"_SparseBayesICA_update_spatial_map_posterior_tracking_inplace", (DL_FUNC) &_SparseBayesICA_update_spatial_map_posterior_tracking_inplace, 8},
    {"_SparseBayesICA_calculate_DPM_hyperparameter_suffstats_inplace", (DL_FUNC) &_SparseBayesICA_calculate_DPM_hyperparameter_suffstats_inplace, 5},
    {"_SparseBayesICA_sample_DPM_hyperparameters_inplace", (DL_FUNC) &_SparseBayesICA_sample_DPM_hyperparameters_inplace, 11},
    {"_SparseBayesICA_evaluate_error_inplace", (DL_FUNC) &_SparseBayesICA_evaluate_error_inplace, 6},
    {"_SparseBayesICA_evaluate_sse_inplace", (DL_FUNC) &_SparseBayesICA_evaluate_sse_inplace, 2},
    {"_SparseBayesICA_evaluate_ssY_inplace", (DL_FUNC) &_SparseBayesICA_evaluate_ssY_inplace, 2},
    {"_SparseBayesICA_evaluate_reg_scale_inplace", (DL_FUNC) &_SparseBayesICA_evaluate_reg_scale_inplace, 8},
    {"_SparseBayesICA_sample_local_shrinkage_parameters_inplace", (DL_FUNC) &_SparseBayesICA_sample_local_shrinkage_parameters_inplace, 7},
    {"_SparseBayesICA_calculate_tausum_inplace", (DL_FUNC) &_SparseBayesICA_calculate_tausum_inplace, 4},
    {"_SparseBayesICA_update_vector_in_place", (DL_FUNC) &_SparseBayesICA_update_vector_in_place, 2},
    {"_SparseBayesICA_update_matrix_in_place", (DL_FUNC) &_SparseBayesICA_update_matrix_in_place, 2},
    {"_SparseBayesICA_update_matrix_in_place_rowspec", (DL_FUNC) &_SparseBayesICA_update_matrix_in_place_rowspec, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SparseBayesICA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
